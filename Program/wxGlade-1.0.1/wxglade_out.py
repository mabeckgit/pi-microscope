#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.1 on Fri May 14 07:45:42 2021
#

import wx

# begin wxGlade: dependencies
import wx.adv
import wx.grid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class tudysOffice(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: tudysOffice.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1400, 720))
        self.SetTitle("tudy's Office")

        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1, style=wx.TB_FLAT)
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Reload", wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Reload Database", "Reloads the database from MySQL and resets the task-manager")
        self.Bind(wx.EVT_TOOL, self.reload_data, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Sync Calendar", wx.ArtProvider.GetBitmap(wx.ART_PRINT, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Synchronize Calendars", "Synchronizes the Outlook calendar with the GCalendar")
        self.Bind(wx.EVT_TOOL, self.sync_ical, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "To-Do-Today", wx.ArtProvider.GetBitmap(wx.ART_TICK_MARK, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Plan the day!", "Triggers the To-Do-Today action")
        self.Bind(wx.EVT_TOOL, self.to_do_today, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "To-Do-Tomorrow", wx.ArtProvider.GetBitmap(wx.ART_GO_FORWARD, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Plan tomorrow's tasks!", "Triggers the To-Do-Today for tomorrow")
        self.Bind(wx.EVT_TOOL, self.to_do_today, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "New Task", wx.ArtProvider.GetBitmap(wx.ART_PLUS, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Adds a new task", "Adds a new task into the tasks-table")
        self.Bind(wx.EVT_TOOL, self.add_task, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Delete Task", wx.ArtProvider.GetBitmap(wx.ART_DELETE, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Deletes a task", "Deletes or completes a task")
        self.Bind(wx.EVT_TOOL, self.delete_task, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "New Project", wx.ArtProvider.GetBitmap(wx.ART_NORMAL_FILE, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Adds a new project", "Create a new project")
        self.Bind(wx.EVT_TOOL, self.add_project, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Delete Project", wx.ArtProvider.GetBitmap(wx.ART_DELETE, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "Deletes a project", "Are you sure?")
        self.Bind(wx.EVT_TOOL, self.delete_project, id=tool.GetId())
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.Realize()
        # Tool Bar end

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        self.task_grid = wx.grid.Grid(self.panel_1, wx.ID_ANY, size=(1, 1))
        self.task_grid.CreateGrid(10, 5)
        self.task_grid.SetGridLineColour(wx.Colour(12, 12, 12))
        self.task_grid.SetColLabelValue(0, "Id")
        self.task_grid.SetColSize(0, 10)
        self.task_grid.SetColLabelValue(1, "Name")
        self.task_grid.SetColSize(1, 200)
        self.task_grid.SetColLabelValue(2, "Project")
        self.task_grid.SetColSize(2, 100)
        self.task_grid.SetColLabelValue(3, "Time\n Estimate")
        self.task_grid.SetColSize(3, 10)
        self.task_grid.SetColLabelValue(4, "Dependency")
        self.task_grid.SetColSize(4, 10)
        self.task_grid.SetRowSize(0, 20)
        self.task_grid.SetMinSize((600, 800))
        sizer_1.Add(self.task_grid, 1, wx.ALL | wx.EXPAND, 5)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        self.project_grid = wx.grid.Grid(self.panel_1, wx.ID_ANY, size=(1, 1))
        self.project_grid.CreateGrid(10, 4)
        self.project_grid.SetColLabelValue(0, "Id")
        self.project_grid.SetColSize(0, 10)
        self.project_grid.SetColLabelValue(1, "Project")
        self.project_grid.SetColSize(1, 200)
        self.project_grid.SetColLabelValue(2, "Deadline")
        self.project_grid.SetColSize(2, 100)
        self.project_grid.SetColLabelValue(3, "Priority")
        self.project_grid.SetColSize(3, 10)
        self.project_grid.SetMinSize((500, 400))
        sizer_2.Add(self.project_grid, 1, wx.ALL | wx.EXPAND, 5)

        self.list_ctrl_1 = wx.ListCtrl(self.panel_1, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.list_ctrl_1.AppendColumn("Project", format=wx.LIST_FORMAT_LEFT, width=300)
        self.list_ctrl_1.AppendColumn("Total Time", format=wx.LIST_FORMAT_LEFT, width=150)
        self.list_ctrl_1.AppendColumn("Value", format=wx.LIST_FORMAT_LEFT, width=300)
        sizer_2.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGE, self.cell_change, self.task_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGED, self.cell_changed, self.task_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGING, self.cell_changing, self.task_grid)
        self.Bind(wx.grid.EVT_TEXT_ENTER, self.text_enter, self.task_grid)
        # end wxGlade

    def reload_data(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'reload_data' not implemented!")
        event.Skip()

    def sync_ical(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'sync_ical' not implemented!")
        event.Skip()

    def to_do_today(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'to_do_today' not implemented!")
        event.Skip()

    def add_task(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'add_task' not implemented!")
        event.Skip()

    def delete_task(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'delete_task' not implemented!")
        event.Skip()

    def add_project(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'add_project' not implemented!")
        event.Skip()

    def delete_project(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'delete_project' not implemented!")
        event.Skip()

    def cell_change(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'cell_change' not implemented!")
        event.Skip()

    def cell_changed(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'cell_changed' not implemented!")
        event.Skip()

    def cell_changing(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'cell_changing' not implemented!")
        event.Skip()

    def text_enter(self, event):  # wxGlade: tudysOffice.<event_handler>
        print("Event handler 'text_enter' not implemented!")
        event.Skip()

# end of class tudysOffice

class NewTaskDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: NewTaskDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.GridSizer(4, 2, 10, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Name")
        grid_sizer_1.Add(label_1, 0, 0, 0)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "Task name")
        grid_sizer_1.Add(self.text_ctrl_1, 0, 0, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "Project")
        grid_sizer_1.Add(label_2, 0, 0, 0)

        self.choice_1 = wx.Choice(self, wx.ID_ANY, choices=["choice 1", "choice 2", "choice 3"])
        self.choice_1.SetSelection(0)
        grid_sizer_1.Add(self.choice_1, 0, 0, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "Time Estimate")
        grid_sizer_1.Add(label_3, 0, 0, 0)

        self.spin_ctrl_1 = wx.SpinCtrl(self, wx.ID_ANY, "60", min=0, max=10000)
        grid_sizer_1.Add(self.spin_ctrl_1, 0, 0, 0)

        label_4 = wx.StaticText(self, wx.ID_ANY, "Dependency")
        grid_sizer_1.Add(label_4, 0, 0, 0)

        self.choice_2 = wx.Choice(self, wx.ID_ANY, choices=["choice 1"])
        self.choice_2.SetSelection(0)
        grid_sizer_1.Add(self.choice_2, 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        # end wxGlade

# end of class NewTaskDialog

class NewProjectDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: NewProjectDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog_1")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.FlexGridSizer(3, 2, 10, 40)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Name")
        grid_sizer_1.Add(label_1, 0, 0, 0)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "Project name")
        grid_sizer_1.Add(self.text_ctrl_1, 0, 0, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "Priority")
        grid_sizer_1.Add(label_3, 0, 0, 0)

        self.spin_ctrl_1 = wx.SpinCtrl(self, wx.ID_ANY, "0", min=0, max=10)
        grid_sizer_1.Add(self.spin_ctrl_1, 0, 0, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "Deadline")
        grid_sizer_1.Add(label_2, 0, 0, 0)

        self.calendar_ctrl_1 = wx.adv.CalendarCtrl(self, wx.ID_ANY)
        grid_sizer_1.Add(self.calendar_ctrl_1, 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        # end wxGlade

# end of class NewProjectDialog

class syncing_dialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: syncing_dialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((300, 200))
        self.SetTitle("Syncing...")

        label_1 = wx.StaticText(self, wx.ID_ANY, "\n\nSyncing calendars, this will take a few seconds.", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.Layout()
        # end wxGlade

# end of class syncing_dialog

class MyApp(wx.App):
    def OnInit(self):
        self.frame = tudysOffice(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
